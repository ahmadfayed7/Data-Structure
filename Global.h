#define MAXQUEUE 100
#define MAXSTACK   100
#define MAXLIST   100
#define LimitMemory
typedef struct entry {
void * e ;
char type ;
}Entry;
//..............................GLOBAL....................................................//
int type (char type);
/////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////
//..............................STACK....................................................//
typedef struct stack *PStack ;
void CreateStack(PStack *pps);
void Push(Entry *pe,PStack ps);
int  StackFull(PStack ps);
void Pop(Entry *pe,PStack ps);
int  StackEmpty(PStack ps);
void StackTop(Entry *pe,PStack ps);
int  StackSize(PStack ps);
void ClearStack(PStack ps);
void TraverseStack(PStack ps ,void (*pf)(Entry));
/////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////
//..............................QUEUE....................................................//
typedef struct queue *PQueue ;
void CreateQueue(PQueue* ppq);
void Append(Entry *pe ,PQueue pq );
void Serve(Entry *pe ,PQueue pq );
int QueueEmpty(PQueue pq);
int QueueFull(PQueue pq);
int  QueueSize(PQueue pq);
void ClearQueue(PQueue pq);
void TraveseQueue(PQueue pq,void(*pf)(Entry e));
/////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////
//..............................Lists....................................................//
typedef struct list *PList ;
void CreateList(PList *ppl);
int ListEmpty(PList pl);
int ListFull(PList pl);
int  ListSize(PList pl);
void InsertList(int pos , Entry *pe , PList pl);
void DeleteList(int pos , Entry *pe , PList pl);
void TraverseList(PList pl ,void(*pf)(Entry));
void ReplaceList(int pos , Entry *pe , PList pl);
void RetriveList(int pos , Entry *pe , PList pl);
void DestroyList(PList pl);
int SeqSearch(Entry *pe , PList pl);
int BinRecSearch(Entry *pe , PList pl);
int BinIterSearch(Entry *pe , PList pl);
void InsertOrder( Entry *pe , PList pl);

/////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////
//..............................Trees....................................................//
typedef struct tree *PTree;
void CreateTree(PTree * pt);
int TreeFull(PTree  pt);
int TreeEmpty(PTree  pt);
int TreeSize(PTree  pt);
int TreeDepth(PTree  pt);
void ClearTree(PTree  pt);
int  InsertTree(Entry *pe ,PTree  pt);
int  DeleteTree(Entry *pe ,PTree  pt);
int  FindTree(Entry *pe ,PTree  pt);
void TraverseTreeVLR(PTree  pt,void (*pf)(Entry));
void TraverseTreeLVR(PTree  pt,void (*pf)(Entry));
void TraverseTreeLRV(PTree  pt,void (*pf)(Entry));
